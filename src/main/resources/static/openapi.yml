openapi: 3.0.3
info:
  title: User Service Rest API
  description: User Service REST API Docs
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Локальный сервер разработки
paths:
  #  User Controller paths
  /api/v1/users/premium:
    get:
      tags:
        - User
      summary: Получение списка премиум пользователей
      description: Возвращает список премиум пользователей с применением фильтров
      parameters:
        - name: filter
          in: query
          description: Фильтры для поиска премиум пользователей
          schema:
            $ref: "#/components/schemas/UserFilterDto"
      responses:
        200:
          description: Успешное получение премиум пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
        400:
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/users/{user_id}:
    put:
      tags:
        - User
      summary: Деактивация пользователя
      description: Деактивация пользователя по его ID
      parameters:
        - name: user_id
          in: path
          description: ID пользователя
          schema:
            type: integer
      responses:
        200:
          description: Пользователь деактивирован успешно
          content:
            text/plain:
              schema:
                example: User deactivated successfully
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      tags:
        - User
      summary: Получение пользователя
      description: Получение пользователя по его ID
      parameters:
        - name: user_id
          in: path
          description: ID пользователя
          schema:
            type: integer
      responses:
        200:
          description: Успешное получение пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/users:
    get:
      tags:
        - User
      summary: Получение пользователей
      description: Получение списка пользователей по их ID
      parameters:
        - name: user_id
          in: query
          description: ID Пользователя(-ей)
          schema:
            type: array
            properties:
              user_id:
                type: integer
                title: user_id
      responses:
        200:
          description: Успешное получение списка пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"

components:
  schemas:
    UserFilterDto:
      type: object
      properties:
        namePattern:
          type: string
          description: Фильтр по имени пользователя
          example: Jessica
        aboutPattern:
          type: string
          description: Фильтр по описанию пользователя
          example: Увлекаюсь...
        contactPattern:
          type: string
          description: Фильтр по контакту
          example: Контакт
        countryPattern:
          type: string
          description: Фильтр по стране
          example: Россия
        cityPattern:
          type: string
          description: Фильтр по городу
          example: Москва
        phonePatter:
          type: string
          description: Фильтр по телефону
          example: 71234567893
        skillPattern:
          type: string
          description: Фильтр по навыку
          example: Java
        experienceMin:
          type: integer
          description: Фильтр по минимальному опыту
          example: 1
        experienceMax:
          type: integer
          description: Фильтр по максимальному опыту
          example: 5

    UserDto:
      type: object
      title: userDto
      properties:
        id:
          title: id
          type: integer
          example: 1
          description: ID пользователя
        username:
          type: string
          title: username
          example: "Somebody"
          description: Имя пользователя
          nullable: false
        email:
          type: string
          title: email
          example: "sombody@mail.ru"
          description: Email пользователя
          nullable: false
        phone:
          type: string
          title: phone
          description: Телефон пользователя
          example: 1234567894

    ErrorResponse:
      type: object
      title: ErrorResponse
      properties:
        code:
          type: integer
          title: code
          description: Код ответа
          example: 400
        message:
          type: string
          description: Сообщение ошибки
          example: "Error..."