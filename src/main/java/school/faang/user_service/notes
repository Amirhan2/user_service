return eventRepository.findAll().stream()
    .map(eventMapper::eventToEventFilterDto)
    .filter(event -> event.equals(filter))
    .map(eventMapper::eventFilterDtoToEvent)
    .map(eventMapper::eventToDto)
    .toList();

        @Test
    void testInvalidationArgs() {
        //Arrange
        EventDto eventDto = new EventDto();
        eventDto.setId(null);
        eventDto.setTitle("");
        eventDto.setStartDate(null);
        //Act & Assert
        assertThrows(DataValidationException.class, () -> eventService.create(eventDto));
    }

        @Test
        void testCreateForValidArgs() {
            //Arrange
            //Act & Assert
            eventService.create(eventDto);
            //verify(eventService, times(1)).create(eventDto);
        }